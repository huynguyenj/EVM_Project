// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**Staff table*/
model Staff {
  id Int @id @default(autoincrement())
  username String @unique @db.VarChar(60)
  password String 
  fullname String? @db.VarChar(60)
  email String @unique
  phone String? @db.VarChar(15)
  address String? 
  avatar String?
  createAt DateTime @db.Date @default(now())
  isActive Boolean  @default(true)
  isDeleted Boolean @default(false)
  agencyId Int?
  agency Agency? @relation(fields: [agencyId], references: [id])
  feedback Feedback[]
  role Role_Staff[]
  order Order[]
  token Token? 
  @@map("staffs")
}
/**Token table*/
model Token {
  id Int @id @default(autoincrement())
  accessToken String
  refreshToken String
  createAt DateTime @db.Date
  staffId Int @unique
  staff Staff @relation(fields: [staffId], references: [id])
  @@map("token")
}
/**Role and Permission table*/
model Role_Staff {
  staffId Int
  staff Staff @relation(fields: [staffId], references: [id])
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
  @@id([staffId, roleId])
  @@map("role_staff")
}
model Role {
  id Int @id @default(autoincrement())
  roleName String @unique
  isActive Boolean @default(true)
  isDeleted Boolean @default(false)
  staff Role_Staff[]
  permissions Role_Permission[]
  @@map("role")
}
model Role_Permission {
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
  permissionId Int
  permission Permission @relation(fields: [permissionId], references: [id])
  @@id([roleId, permissionId])
  @@map("role_permission")
}
model Permission { 
  id Int @id @default(autoincrement())
  permissionName String
  isActive Boolean
  isDeleted Boolean
  roles Role_Permission[]
  @@map("permissions")
}

/**Agency table */
model Agency {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  location String @db.VarChar(200)
  address String @db.VarChar(200)
  contactInfo String @db.Text
  status AgencyStatus @default(Active)
  staffs Staff[]
  order Order[]
  transferContract Agency_Order[]
  driveTrial Drive_Trial[]
  revenue Revenue?
  pricePolicy Price_Policy[]
  discountPolicy Discount_Policy[]
  promotion Promotion[]
  @@map("agencies")
}

enum AgencyStatus {
  Active
  Inactive
}

/**Revenue table*/
model Revenue {
  id Int @id @default(autoincrement())
  total Float
  createAt DateTime @db.Date
  updateAt DateTime @db.Date
  agencyId Int @unique
  agency Agency @relation(fields: [agencyId], references: [id])
  @@map("revenue")
}

/**Contract table*/
model Agency_Order {
  id Int @id @default(autoincrement())
  quantity Int
  status AgencyOrderStatus @default(DRAFT)
  orderAt DateTime @db.Date @default(now())
  basePrice Float
  wholesalePrice Float
  discountTotal Float
  promotionTotal Float
  finalPrice Float
  subtotal Float
  agencyId Int
  agency Agency @relation(fields: [agencyId], references: [id])
  warehouseId Int
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  electricMotorbikeId Int
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  pricePolicyId Int
  pricePolicy Price_Policy @relation(fields: [pricePolicyId], references: [id])
  discountId Int?
  discountPolicy Discount_Policy? @relation(fields: [discountId], references: [id])
  promotionId Int?
  promotion Promotion? @relation(fields: [promotionId], references: [id])
  agencyBill Agency_Bill?
  @@map("agency_orders")
}

enum AgencyOrderStatus {
  DRAFT
  PENDING
  APPROVED
  DELIVERED
  PAID
  CANCELED
}

/**Price policy*/
model Price_Policy {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  content String @db.VarChar(200)
  policy String @db.Text()
  wholesalePrice Float
  agencyId Int? 
  agency Agency? @relation(fields: [agencyId], references: [id])
  motorbikeId Int
  motorbike Electric_Motorbike @relation(fields: [motorbikeId], references: [id])
  agencyOrder Agency_Order[]
  @@unique([agencyId, motorbikeId])
  @@map("price_policy")
}
/**Discount policy*/
model Discount_Policy {
  id Int @id @default(autoincrement())
  name String @db.VarChar(300)
  type DiscountType
  valueType DiscountValueType
  value Float
  min_quantity Int
  startAt DateTime @db.Date()
  endAt DateTime @db.Date()
  status DiscountStatus
  agencyId Int?
  agency Agency? @relation(fields: [agencyId], references: [id])
  motorbikeId Int
  motorbike Electric_Motorbike? @relation(fields: [motorbikeId], references: [id])
  agencyOrder Agency_Order[]
  @@unique([agencyId, motorbikeId, type])
  @@map("discount_policy")
}

enum DiscountType {
  VOLUME
  SPECIAL
}

enum DiscountValueType {
  PERCENT
  FIXED
}

enum DiscountStatus {
  ACTIVE
  INACTIVE
}

/**Promotion policy*/
model Promotion {
  id Int @id @default(autoincrement())
  name String @db.VarChar(300)
  description String @db.Text()
  valueType PromotionValueType
  value Float
  startAt DateTime @db.Date()
  endAt DateTime @db.Date()
  status DiscountStatus
  agencyId Int?
  agency Agency? @relation(fields: [agencyId], references: [id])
  motorbikeId Int?
  motorbike Electric_Motorbike? @relation(fields: [motorbikeId], references: [id])
  agencyOrder Agency_Order[]
  @@map("promotions")
}

enum PromotionValueType {
  PERCENT
  FIXED
}

enum PromotionStatus {
  ACTIVE
  INACTIVE
}

/**Agency debt table*/
model Agency_Bill {
  id Int @id @default(autoincrement())
  amount Float
  createAt DateTime @db.Date @default(now())
  isCompleted Boolean @default(false)
  type AgencyBillType
  agencyOrderId Int @unique
  agencyOrder Agency_Order @relation(fields: [agencyOrderId], references: [id])
  agencyPayment Agency_Payment?
  @@map("agency_bill")
}

enum AgencyBillType {
  FULL
  DEFERRED
}

model Agency_Payment {
  id Int @id @default(autoincrement())
  amount Float
  paidAt DateTime @db.Date
  agencyBillId Int @unique
  agencyBill Agency_Bill @relation(fields: [agencyBillId], references: [id])
  @@map("agency_payment")
}
/**Warehouse and Inventory*/
model Warehouse {
  id Int @id @default(autoincrement())
  location String @db.VarChar(200)
  address String  @db.VarChar(300)
  name String @db.VarChar(150)
  isActive Boolean @default(true)
  motorbikes Inventory[]
  agencyOrder Agency_Order[]
  @@map("warehouses")
}
model Inventory { 
  electricMotorbikeId Int
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  warehouseId Int
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  quantity Int
  stockDate DateTime @db.Date
  lastUpdate DateTime @db.Date
  @@map("inventory")
  @@id([electricMotorbikeId, warehouseId])
}
/**Customer*/
model Customer {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  address String
  phone String @db.VarChar(20)
  email String @unique
  credentialId Int @unique
  dob DateTime @db.Date
  feedback Feedback[]
  orders Order[]
  customerDebt Customer_Debt[]
  voucher Voucher[]
}
/**Customer debt table*/
model Customer_Debt {
  id Int @id @default(autoincrement())
  amount Float
  duration String
  startAt DateTime @db.Date
  endAt DateTime @db.Date
  isCompleted Boolean
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
  paidProcess Paid_Process[]
}

model Paid_Process {
  id Int @id @default(autoincrement())
  amount Float
  paidAt DateTime @db.Date
  customerDebtId Int
  customerDebt Customer_Debt @relation(fields: [id], references: [id])
}

/**Voucher table*/
model Voucher {
  id Int @id @default(autoincrement())
  percentReduce Float
  description String
  expiredDate DateTime @db.Date
  usageLimit Float
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
}

/**Feedback table*/
model Feedback {
  id Int @id @default(autoincrement())
  title String
  content String
  image String?
  createAt DateTime @db.Date
  isResolve Boolean
  isDeleted Boolean
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
  staffId Int
  staff Staff @relation(fields: [staffId], references: [id])
}

/**Drive trial table*/
model Drive_Trial {
  id Int @id @default(autoincrement())
  fullname String @db.VarChar(50)
  email String
  phone String @db.VarChar(20)
  driveDate DateTime @db.Date
  driveTime DateTime @db.Time()
  status DriveStatus
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  agencyId Int
  agency Agency @relation(fields: [agencyId], references: [id])
}

enum DriveStatus {
  pending
  accept
  cancel
  finish
}

/**Electric motorbike table*/
model Electric_Motorbike {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200)
  price Float 
  description String @db.Text()
  model String @db.VarChar(200)
  makeFrom String @db.VarChar(100)
  version String  @db.VarChar(100)
  isDeleted Boolean @default(false)
  driveTrial Drive_Trial?
  configuration Configuration?
  appearance Appearance?
  safeFeature Safe_Feature?
  battery Battery?
  colors Motorbike_Color[]
  images Motorbike_Image[]
  warehouse Inventory[]
  orders Order[]
  agencyOrder Agency_Order[]
  pricePolicy Price_Policy[]
  discountPolicy Discount_Policy[]
  promotion Promotion[]
  @@map("electric_motorbikes")
}

model Configuration {
  id Int @id @default(autoincrement())
  motorType String @db.VarChar(200)
  speedLimit String @db.VarChar(200)
  maximumCapacity Int
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  @@map("configurations")
}

model Motorbike_Color {
  motorbikeId Int
  motorbike Electric_Motorbike @relation(fields: [motorbikeId], references: [id])
  colorId Int
  color Color @relation(fields: [colorId], references: [id])
  imageUrl String @db.Text()
  @@id([motorbikeId, colorId])
  @@map("motorbike_color")
}

model Color {
  id Int @id @default(autoincrement())
  colorType String @db.VarChar(200) @unique()
  motorbikes Motorbike_Color[] 
  @@map("colors")
}

model Motorbike_Image {
  id Int @id @default(autoincrement())
  imageUrl String @db.Text()
  motorbikeId Int
  electricMotorbike Electric_Motorbike @relation(fields: [motorbikeId], references: [id])
  @@map("motorbike_images")
}
model Appearance {
  id Int @id @default(autoincrement())
  length Float
  width Float
  height Float
  weight Float
  undercarriageDistance Float
  storageLimit Float
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  @@map("appearances")
}

model Safe_Feature {
  id Int @id @default(autoincrement())
  brake String @db.VarChar(200)
  lock String @db.VarChar(200)
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  @@map("safe_features")
}

model Battery {
  id Int @id @default(autoincrement())
  type String @db.VarChar(200)
  capacity String @db.VarChar(200)
  chargeTime String @db.VarChar(200)
  chargeType String @db.VarChar(200)
  energyConsumption String @db.VarChar(200)
  limit String @db.VarChar(200)
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  @@map("batteries")
}

/**Order table*/
model Order {
  id Int @id @default(autoincrement())
  type OrderType
  price Float
  address Float
  orderDate DateTime @db.Date
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
  staffId Int
  staff Staff @relation(fields: [staffId], references: [id])
  agencyId Int
  agency Agency @relation(fields: [agencyId], references: [id])
  electricMotorbikeId Int @unique
  electricMotorbike Electric_Motorbike @relation(fields: [electricMotorbikeId], references: [id])
  payment Payment?
  shipment Shipment?
}

enum OrderType {
  order
  pre_order
}

/**Payment table*/
model Payment {
  id Int @id @default(autoincrement())
  paymentMethod PaymentMethod
  amount Float
  status PaymentStatus
  paidAt DateTime @db.Date
  orderId Int @unique
  order Order @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  fail
  success
  processing
  cancel
}

enum PaymentMethod {
  bank
  pay_full
  instalment
}
/**Shipment table*/
model Shipment {
  id Int @id @default(autoincrement())
  trackingNumber BigInt
  carrier String
  shippedAt DateTime @db.Date
  deliveredAt DateTime @db.Date
  status ShipmentStatus
  orderId Int @unique
  order Order @relation(fields: [orderId], references: [id])
}

enum ShipmentStatus {
  pending
  shipped
  delivered
  cancel
}

